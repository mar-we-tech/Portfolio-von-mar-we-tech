index.html



<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Snake Game</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <div class="game-container">
      <h1>Snake Game</h1>
      <canvas id="gameCanvas"></canvas>
      <div class="controls">
        <button id="startBtn">Start / Restart</button>
        <div class="scoreboard">
          <span>Score: <span id="scoreValue">0</span></span>
          <span>High Score: <span id="highScoreValue">0</span></span>
        </div>
      </div>
    </div>
    <script src="script.js"></script>
  </body>
</html>



-


style.css


html,
body {
  margin: 0;
  padding: 0;
  width: 100vw;
  height: 100vh;
}

/* Body als Flex-Container */
body {
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: "Montserrat", sans-serif;
  background: linear-gradient(135deg, #1e3c72, #2a5298);
}

/* Zentraler Game-Container */
.game-container {
  background-color: rgba(0, 0, 0, 0.7);
  padding: 40px 60px;
  border-radius: 15px;
  text-align: center;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
}

/* Überschrift im Container */
h1 {
  color: #ffffff;
  font-size: 3rem;
  margin-bottom: 20px;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
}

/* Canvas */
canvas {
  display: block;
  margin: 0 auto;
  border: 4px solid #ffffff;
  border-radius: 10px;
  background-color: #212121;
}

/* Controls */
.controls {
  margin-top: 20px;
}

/* Button */
button {
  background: linear-gradient(145deg, #28a745, #218838);
  color: #ffffff;
  border: none;
  border-radius: 50px;
  padding: 20px 50px;
  font-size: 1.6rem;
  cursor: pointer;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.2);
}

button:hover {
  transform: translateY(-3px);
  box-shadow: 6px 6px 12px rgba(0, 0, 0, 0.3);
}

/* Scoreboard */
.scoreboard {
  margin-top: 15px;
  color: #ffffff;
  font-size: 1.4rem;
  display: flex;
  justify-content: space-around;
}

-


scirpt.js



const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

const startBtn = document.getElementById("startBtn");
const scoreElement = document.getElementById("scoreValue");
const highScoreElement = document.getElementById("highScoreValue");


const gridSize = 20; 
const tileCount = 25; 
canvas.width = gridSize * tileCount;
canvas.height = gridSize * tileCount;

let snake = [];
let food = {};
let obstacles = [];
let dx = gridSize;
let dy = 0;
let score = 0;
let highScore = localStorage.getItem("snakeHighScore") || 0;
let gameInterval = null;
const initialSpeed = 150;

highScoreElement.textContent = highScore;

startBtn.addEventListener("click", initGame);

document.addEventListener("keydown", changeDirection);


function initGame() {
  snake = [
    {
      x: Math.floor(tileCount / 2) * gridSize,
      y: Math.floor(tileCount / 2) * gridSize,
    },
  ];
  dx = gridSize; 
  dy = 0;
  score = 0;
  scoreElement.textContent = score;

  generateFood();
  generateObstacles();

  if (gameInterval) clearInterval(gameInterval);
  gameInterval = setInterval(updateGame, initialSpeed);
}

function updateGame() {
  moveSnake();
  drawGame();
}

function moveSnake() {
 
  let head = {
    x: snake[0].x + dx,
    y: snake[0].y + dy,
  };

 
  if (head.x >= canvas.width) {
    head.x = 0;
  } else if (head.x < 0) {
    head.x = canvas.width - gridSize;
  }
  if (head.y >= canvas.height) {
    head.y = 0;
  } else if (head.y < 0) {
    head.y = canvas.height - gridSize;
  }
  
  for (let segment of snake) {
    if (head.x === segment.x && head.y === segment.y) {
      return gameOver();
    }
  }

  for (let obs of obstacles) {
    if (head.x === obs.x && head.y === obs.y) {
      return gameOver();
    }
  }

  const ateFood = head.x === food.x && head.y === food.y;
  snake.unshift(head);

  if (ateFood) {
    score++;
    scoreElement.textContent = score;
    if (score > highScore) {
      highScore = score;
      highScoreElement.textContent = highScore;
      localStorage.setItem("snakeHighScore", highScore);
    }
    
    generateFood();
  } else {
   
    snake.pop();
  }
}

function drawGame() {
  
  ctx.fillStyle = "#212121";
  ctx.fillRect(0, 0, canvas.width, canvas.height);


  obstacles.forEach((obs) => {
    ctx.fillStyle = "#777";
    ctx.fillRect(obs.x + 1, obs.y + 1, gridSize - 2, gridSize - 2);
  });


  ctx.fillStyle = "red";
  ctx.fillRect(food.x + 1, food.y + 1, gridSize - 2, gridSize - 2);

 
  snake.forEach((segment, index) => {
    ctx.fillStyle = index === 0 ? "#aaff00" : "limegreen";
    ctx.fillRect(segment.x + 1, segment.y + 1, gridSize - 2, gridSize - 2);
  });
}

function generateFood() {
  food = {
    x: Math.floor(Math.random() * tileCount) * gridSize,
    y: Math.floor(Math.random() * tileCount) * gridSize,
  };


  while (
    snake.some((seg) => seg.x === food.x && seg.y === food.y) ||
    obstacles.some((obs) => obs.x === food.x && obs.y === food.y)
  ) {
    food.x = Math.floor(Math.random() * tileCount) * gridSize;
    food.y = Math.floor(Math.random() * tileCount) * gridSize;
  }
}

function generateObstacles() {
  obstacles = [];
  const numberOfObstacles = 5; 
  for (let i = 0; i < numberOfObstacles; i++) {
    let obstacle = {
      x: Math.floor(Math.random() * tileCount) * gridSize,
      y: Math.floor(Math.random() * tileCount) * gridSize,
    };
    
    while (
      snake.some((seg) => seg.x === obstacle.x && seg.y === obstacle.y) ||
      (food && food.x === obstacle.x && food.y === obstacle.y) ||
      obstacles.some((obs) => obs.x === obstacle.x && obs.y === obstacle.y)
    ) {
      obstacle.x = Math.floor(Math.random() * tileCount) * gridSize;
      obstacle.y = Math.floor(Math.random() * tileCount) * gridSize;
    }
    obstacles.push(obstacle);
  }
}

function changeDirection(e) {
  switch (e.key) {
    case "ArrowUp":
    case "w":
    case "W":
      if (dy === gridSize) return;
      dx = 0;
      dy = -gridSize;
      break;
    case "ArrowDown":
    case "s":
    case "S":
      if (dy === -gridSize) return;
      dx = 0;
      dy = gridSize;
      break;
    case "ArrowLeft":
    case "a":
    case "A":
      if (dx === gridSize) return;
      dx = -gridSize;
      dy = 0;
      break;
    case "ArrowRight":
    case "d":
    case "D":
      if (dx === -gridSize) return;
      dx = gridSize;
      dy = 0;
      break;
  }
}

function gameOver() {
  clearInterval(gameInterval);
  
  ctx.fillStyle = "rgba(0, 0, 0, 0.6)";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  ctx.fillStyle = "#fff";
  ctx.font = "bold 36px Montserrat, sans-serif";
  ctx.textAlign = "center";
  ctx.fillText("Game Over", canvas.width / 2, canvas.height / 2 - 20);
  ctx.font = "24px Montserrat, sans-serif";
  ctx.fillText(`Score: ${score}`, canvas.width / 2, canvas.height / 2 + 20);
  ctx.fillText(
    'Drücke "Start / Restart"',
    canvas.width / 2,
    canvas.height / 2 + 60
  );
}
